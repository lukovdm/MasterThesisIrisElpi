{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe syntax we parse is <intropatternlist> ::= \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q <intropattern> <intropatternlist>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<intropattern> ::= <ident> `_' | `?'\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q| `#' | `*' | `**' | `/=' | `//' | `!%' `!>' | `->' | `<-' `[' <intropatternlist> `]' `(' <intropatternconjlist> `)' `%' <ident> `#' <intropattern> % Wait this one is weird `-#' <intropattern> `>' <intropattern>\\E$"}
{"rule":"ARROWS","sentence":"^\\Q| `#' | `*' | `**' | `/=' | `//' | `!%' `!>' | `->' | `<-' `[' <intropatternlist> `]' `(' <intropatternconjlist> `)' `%' <ident> `#' <intropattern> % Wait this one is weird `-#' <intropattern> `>' <intropattern>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<intropatternlist> ::= \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q <intropattern> `|' <intropatternlist> <intropattern> <intropatternlist>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<intropatternconjlist> ::= \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q <intropattern> ` ' <intropatternconjlist> With the caveat that a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has to have at least length 2.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q<intropatternconjlist> ::= \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q <intropattern> ` ' <intropatternconjlist> With the caveat that a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has to have at least length 2.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QOur subset is shown here <intropattern> ::= `*' `**' <simpleintropattern>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<simpleintropattern> ::= <namingintropattern> `' <orandintropattern> <equalityintropattern>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<namingintropattern> ::= <ident> `?'\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<orandintropattern> ::= `[' ( <intropattern>\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q )\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q|\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q `]' `(' <intropattern>\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q&\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q `)'\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q`?'<ident>\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q<equalityintropattern> ::= `->' `<-' `[=' <intropattern>\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q `]' …\\E$"}
{"rule":"ARROWS","sentence":"^\\Q<equalityintropattern> ::= `->' `<-' `[=' <intropattern>\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q `]' …\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QSealed goals allow us to program our tactics in separate steps, where each step is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThese are cases like `//', `/=' and `%a'.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\Qis a tactics language for separation logic \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Is this the correct paper?.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qimplements \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qprolog and adds constraint handling rules to it.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\Qconsists of a separation logic \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a tactics language for separation logic \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\Qis a separation logic \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a tactics language for separation logic \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QTo be able to reason about this logic in coq a tactics language has been added called the Iris Proof Mode (IPM) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ON_IN_THE_MIDDLE","sentence":"^\\QThis introduces a variable without needing a name first two steps create the name of the variable Next we use a function as the proof term We extract the (term -> term) proof variable and the type Add the new variable to the context with the name Get the type of the new hole Call the continuation function on the hole in the context\\E$"}
{"rule":"ON_IN_THE_MIDDLE","sentence":"^\\QWhen introducing a forall we need to add the variable to our context Next steps in the proof thus need the new value in the context We have to use continuation passing style This introduces a variable without needing a name first two steps create the name of the variable Next we use a function as the proof term We extract the (term -> term) proof variable and the type Add the new variable to the context with the name Get the type of the new hole Call the continuation function on the hole in the context\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QNext we show how to use separation logic to create hoare triples in the form of weakest preconditions to give a specification of a\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QNext we show how to use separation logic to create hoare triples in the form of weakest preconditions to give a specification of a program in sec:hoare.\\E$"}
{"rule":"CD_NN","sentence":"^\\Q[Arity one predicate, arity zero arguments:] Any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is monotone when for any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it holds that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q [Arity two predicate, arity one arguments:] Any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is monotone when for any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it holds that \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"ONE_PLURAL","sentence":"^\\Q[Arity one predicate, arity zero arguments:] Any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is monotone when for any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it holds that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q [Arity two predicate, arity one arguments:] Any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is monotone when for any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it holds that \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qpropositions include common connectives like equality, list manipulations and set manipulations.\\E$"}
{"rule":"WANT","sentence":"^\\QWe want to connect an MLL in memory to a mathematical list.\\E$"}
{"rule":"WANT","sentence":"^\\QThe first property defines the least fixpoint to be a fixpoint The second property defines the least fixpoint to be the least This is why it is the iteration property Explain why iteration It is not yet full induction For full induction we know that the fixpoint holds under one application of the functor And what we want to prove holds under one application of the functor Given a monotone predicate \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it holds that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q We now show how this can be applied to create the predicate We want to transform the non-structurally recursive definition of into a least fixpoint \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q We start by ?ing any recursive calls in the definition in order to create a functor?\\E$"}
{"rule":"WANT","sentence":"^\\QThe first mayor step we want to simplify is the uncurrying and currying we had to do\\E$"}
{"rule":"WANT","sentence":"^\\QEvery action we take in the proof will only depend on the top level connective of what we want to prove.\\E$"}
{"rule":"SENTENCE_FRAGMENT","sentence":"^\\QBefore starting the eiIntros tactic we need a quick interlude about how the Iris contexts are made.\\E$"}
{"rule":"ACTUAL","sentence":"^\\QIn order to define a recursive formula we have to prove it actually exists.\\E$"}
{"rule":"ACTUAL","sentence":"^\\QIn order to define a recursive predicate we have to prove it actually exists.\\E$"}
{"rule":"EN_COMPOUNDS","sentence":"^\\QWe omit the premises in future proof states, but it is always there since it is persistent.\\E$"}
{"rule":"AGREEMENT_SENT_START","sentence":"^\\QThis is where the HOAS is applied.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe thus introduce a new type for an hole.\\E$"}
{"rule":"THIS_NNS","sentence":"^\\QTo accomplish this databases are used with commands to add extra reduction rules to the database.\\E$"}
{"rule":"ADJECTIVE_ADVERB","sentence":"^\\QThen, it continuous executing the rest of the intro patterns.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFirst it calls a proof generator that puts an universal quantifier at the front of the goal as a universal quantifier.\\E$"}
{"rule":"THREE_NN","sentence":"^\\QConsider the separation logic statement.\\E$"}
{"rule":"ADMIT_ENJOY_VB","sentence":"^\\QA few a few expansions were added as inspired by ssreflect \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, they are used to perform other common initial proof steps such as simpl, done and others.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qthesis\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Qthesis\\E$"}
{"rule":"THE_PUNCT","sentence":"^\\QThis chapter will function explain relevant inner working of the , give a tutorial on how works and how to create a tactic using , and finally set up the necessary functions for the commands and tactics around inductive predicates we will define in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThis chapter will function explain relevant inner working of the , give a tutorial on how works and how to create a tactic using , and finally set up the necessary functions for the commands and tactics around inductive predicates we will define in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QImplementing an Iris tactic in .\\E$"}
{"rule":"THE_SENT_END","sentence":"^\\QNext in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q we explain how the context is implemented in the .\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qexample.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QThe iIntros tactic acts as the intros tactic but on propositions and the contexts.\\E$"}
{"rule":"ADMIT_ENJOY_VB","sentence":"^\\QA few expansions were added as inspired by ssreflect \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, they are used to perform other common initial proof steps such as simpl, done and others.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThus, in implementation of the separation logic , these two types of assumptions have been made into two contexts, the persistent and the spatial context.\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\QThe assumption \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is thus named \"HP\".\\E$"}
{"rule":"EN_QUOTES","sentence":"^\\QWe can use iIntros \"HP HQ\", this will intelligently apply wand-IE twice.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QThus, the call on line 4 could fail, which would cause a backtrack and an incorrect split of the input, Pred X holds but rule 2 is used.\\E$"}
{"rule":"PRP_VB","sentence":"^\\QWhen we interpret the inductive we descent into the binders.\\E$"}
{"rule":"PRP_VB","sentence":"^\\QWhen we interpret the inductive, we descent into the binders.\\E$"}
{"rule":"ACTUAL","sentence":"^\\QThus, to store the pre fixpoint function of is_R_list in the database we add the rule: Where instead of « \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q » we insert the variable containing the actual reference.\\E$"}
{"rule":"ARTICLE_ADJECTIVE_OF","sentence":"^\\QWe store the references to any objects we create after any of the previous of following steps.\\E$"}
{"rule":"THREE_NN","sentence":"^\\QWhenever a disjunction elimination intro pattern is used,\\E$"}
{"rule":"SUBJECT_VERB_AGREEMENT_PLURAL","sentence":"^\\QThis introduction pattern checks if the current top level connective is an inductive predicate.\\E$"}
{"rule":"ACTUAL","sentence":"^\\QThus, to store the pre fixpoint function of is_MLL in the database we add the rule: Where instead of « \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q » we insert the variable containing the actual reference.\\E$"}
{"rule":"AI_EN_LECTOR_REPLACEMENT_VERB_TENSE","sentence":"^\\QDuring the creation of our system, we reimplement a significant part of the tactics from the IPM and evaluate if Elpi would be a good fit for reimplementing the full IPM.\\E$"}
{"rule":"EN_REPEATEDWORDS_SEVERAL","sentence":"^\\QThis thesis aims to solve this problem by adding several commands and tactics to Coq that simplify and streamline working with inductive predicates.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QThe second box is a boolean.\\E$"}
{"rule":"EN_REPEATEDWORDS_SEVERAL","sentence":"^\\QSeveral trivial proofs must be performed, and several intermediary objects must be defined.\\E$"}
{"rule":"AI_HYDRA_LEO_MISSING_COMMA","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Any sub propositions that occur both on the left and right-hand side are canceled out using \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"TOO_LONG_SENTENCE","sentence":"^\\QGiven a monotone function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, called the pre fixpoint function, there exists the least fixpoint \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, such that The fixpoint equality holds \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q The iteration property holds \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Given a monotone function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q we define \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q We now prove the two properties of the least fixpoint The right to left direction follows from monotonicity of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"PUNCTUATION_PARAGRAPH_END","sentence":"^\\QThe pointwise relation \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a special case of a respectful relation defined as \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q The new signature for the existential quantification becomes \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"EN_A_VS_AN","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Filling in an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as the proper element, we get the following statement.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe sealing of goals to pass them around is necessary when you can make no assumptions on what happens to the context of a goal, and is thus the model used for the entry point of .\\E$"}
{"rule":"AI_EN_LECTOR_MISSING_PUNCTUATION_COMMA","sentence":"^\\QHowever, Elpi includes the excellent Elpi tracer and an Elpi trace browser extension \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for the editor Visual Studio Code.\\E$"}
{"rule":"AI_HYDRA_LEO_MISSING_OF","sentence":"^\\QProving a function monotone.\\E$"}
{"rule":"AI_HYDRA_LEO_MISSING_COMMA","sentence":"^\\QProving a function monotone.\\E$"}
{"rule":"TYPE_OF_PLURAL","sentence":"^\\QLastly, the type ends in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which is the type of Iris propositions over heaps.\\E$"}
{"rule":"EN_REPEATEDWORDS_SEVERAL","sentence":"^\\QThis results in several proofs and manual intermediary definitions.\\E$"}
{"rule":"PCT_SINGULAR_NOUN_PLURAL_VERB_AGREEMENT","sentence":"^\\Qsets.v: Contains the definition of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the representation predicate for marked linked lists.\\E$"}
