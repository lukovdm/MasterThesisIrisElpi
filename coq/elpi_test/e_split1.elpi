type sep_split list term -> open-tactic.
sep_split HS G GL :- coq.ltac.call "helper_eiSplit" [trm {list->listterm HS}] G GL.

type tc_solve open-tactic.
tc_solve G GL :- coq.ltac.call "tc_solve" [] G GL.

type pm_reduce open-tactic.
pm_reduce G GL :- coq.ltac.call "pm_reduce" [] G GL.

type split open-tactic.
split G GL :- coq.ltac.call "split" [] G GL.

solve (goal _Ctx _Trigger _Type _Proof [str HSS] as G) GL :-
        rex.split " " HSS HS,
        std.map HS string->stringterm HTS,
        std.map HTS (x\ r\ r = {{ INamed lp:x }}) HI,
        sep_split HI G [G0, G1 | GL0],
        coq.ltac.open tc_solve G0 GL1,
        coq.ltac.open pm_reduce G1 [G3 | GL2],
        coq.ltac.open split G3 GL3,
        std.append { std.append { std.append GL0 GL1 } GL2 } GL3 GL.