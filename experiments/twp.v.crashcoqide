From elpi Require Import elpi.

From iris.bi Require Import fixpoint big_op.
From iris.proofmode Require Import proofmode.
From iris.program_logic Require Export weakestpre.
From iris.prelude Require Import options.
Import uPred.

From iris.proofmode Require Import base environments proofmode tactics coq_tactics reduction intro_patterns class_instances spec_patterns.


From eIris.proofmode Require Import base inductive intros.

Section TWP.

  Context `{!irisGS_gen hlc Λ Σ}.

  (* Set Printing Coercions. *)

  (* Typeclasses eauto := debug. *)

  #[debug, nounfold, noconstr, noind]
  EI.ind
  Inductive twp (s : stuckness) : coPset -> expr Λ -> (val Λ -d> iProp Σ) -n> iProp Σ :=
    | twp_some E v e1 (Φ : val Λ -d> iProp Σ) : (|={E}=> Φ v) -∗ ⌜to_val e1 = Some v⌝ -∗ twp s E e1 Φ
    | twp_none E e1 Φ : (∀ σ1 ns κs nt,
                          state_interp σ1 ns κs nt ={E,∅}=∗
                            ⌜if s is NotStuck then reducible_no_obs e1 σ1 else True⌝ ∗
                            ∀ κ e2 σ2 efs, ⌜prim_step e1 σ1 κ e2 σ2 efs⌝ ={∅,E}=∗
                              ⌜κ = []⌝ ∗
                              state_interp σ2 (S ns) κs (length efs + nt) ∗
                              twp s E e2 Φ ∗
                              [∗ list] ef ∈ efs, twp s ⊤ ef fork_post) 
                          -∗ ⌜to_val e1 = None⌝ 
                          -∗ twp s E e1 Φ.

  Check twp_pre_ne.
  Check twp.
  Check twp_iter. (* Defined using ne Phi instead of add it as a seperate assumption *)

  Global Instance twp_ne s E e n :
    Proper ((dist n) ==> dist n) (twp s E e).
  Proof.
    solve_proper.
  Qed.

  (* Lemma twp_pre_ne :
    ∀ n (rec : coPset → expr Λ → ofe_car (val Λ -d> reverse_coercion (iPropO Σ) (iProp Σ)) -n> iProp Σ) 
      (s : stuckness) (H : coPset) (H0 : expr Λ),
    (Proper (dist n ==> dist n) (rec H H0)) -> Proper (dist n ==> dist n) (twp_pre s rec H H0).
  Proof.
    solve_proper.
  Qed. *)

  (* Local Existing Instance twp_pre_ne. *)

  Lemma unfold_1 :
  ∀ (s : stuckness) (H : coPset) (H0 : expr Λ) (H1 : ofe_car (val Λ -d> reverse_coercion (iPropO Σ) (iProp Σ))),
    twp s H H0 H1 ⊢ twp_pre s (twp s) H H0 H1.
  Proof.
    intros.
    iIntros "HF".
(*     iApply ("HF" $! (OfeMor (F (bi_least_fixpoint F))) with "[#]"). *)

    notypeclasses refine (tac_forall_specialize _ "HF" _ _ _ _ _ _ _).
    - pm_reflexivity.
    - tc_solve.
    - notypeclasses refine (ex_intro _ (λ x y, @OfeMor _ _ (twp_pre s (twp s) x y) _ ) _ ).
      Unshelve.
      2: {
        Typeclasses eauto := debug.
        solve_proper.
      }
      pm_reduce. 
      iApply "HF".
      iModIntro.
      iIntros (? ? ?) "HY".
      iApply ((iProper (□> .> .> .> bi_wand ==> .> .> .> bi_wand) (twp_pre _))).
      + apply twp_pre_mono.
      + iModIntro.
        iIntros (? ? ?) "HF".
        iApply twp_unfold_2.
        iApply "HF".}
  Qed.

  Check twp.
  Print twp.
  Print twp_pre.

  Definition twp_pre' : stuckness -> (leibnizO coPset -> expr Λ -> (val Λ -d> iProp Σ) -> iProp Σ) -> leibnizO coPset -> expr Λ -> (val Λ -d> iProp Σ) -> iProp Σ := twp_pre.
  Definition twp' : stuckness -> leibnizO coPset -> expr Λ -> (val Λ -d> iProp Σ) -> iPropI Σ := twp.

  Definition twp_pre'' := 
    λ (s : stuckness) (rec : coPset → expr Λ → (val Λ -d> iProp Σ) -> iProp Σ) (H : coPset) (H0 : expr Λ) (H1 : val Λ -d> iProp Σ),
    ((∃ v : val Λ, (|={H}=> H1 v) ∗ ⌜to_val H0 = Some v⌝ ∗ True)
    ∨ (∀ (σ1 : state Λ) (ns : nat) (κs : list (observation Λ)) (nt : nat),
    state_interp σ1 ns κs nt ={H,∅}=∗
    ⌜match s with
    | NotStuck => reducible_no_obs H0 σ1
    | MaybeStuck => True
    end⌝ ∗
    ∀ (κ : list (observation Λ)) (e2 : expr Λ) (σ2 : state Λ) (efs : list (expr Λ)),
    ⌜prim_step H0 σ1 κ e2 σ2 efs⌝ ={∅,H}=∗ ⌜κ = []⌝ ∗ state_interp σ2 (S ns) κs (length efs + nt) ∗ rec H e2 H1 ∗
    ([∗ list] ef ∈ efs, rec ⊤ ef fork_post)) ∗ ⌜to_val H0 = None⌝ ∗ True)%I.

  Definition twp'' := λ (s : stuckness) (H : coPset) (H0 : expr Λ) (H1 : val Λ -d> iProp Σ),
    (∀ H2 : coPset → expr Λ → (val Λ -d> iProp Σ) -n> iProp Σ,
    □ (∀ (H3 : coPset) (H4 : expr Λ) (H5 : val Λ -d> iProp Σ), twp_pre'' s H2 H3 H4 H5 -∗ H2 H3 H4 H5) -∗ H2 H H0 H1)%I.

  

  Global Instance twp_ne s E e n :
    Proper ((dist n) ==> dist n) (twp'' s E e).
  Proof.
    solve_proper.
  Qed.

  Notation "'WPE' e @ s ; E [{ Φ } ]" := (twp s E e%E Φ)
    (at level 20, e, Φ at level 200, only parsing) : bi_scope.
  Notation "'WPE' e @ E [{ Φ } ]" := (twp NotStuck E e%E Φ)
    (at level 20, e, Φ at level 200, only parsing) : bi_scope.
  Notation "'WPE' e @ E ? [{ Φ } ]" := (twp MaybeStuck E e%E Φ)
    (at level 20, e, Φ at level 200, only parsing) : bi_scope.
  Notation "'WPE' e [{ Φ } ]" := (twp NotStuck ⊤ e%E Φ)
    (at level 20, e, Φ at level 200, only parsing) : bi_scope.
  Notation "'WPE' e ? [{ Φ } ]" := (twp MaybeStuck ⊤ e%E Φ)
    (at level 20, e, Φ at level 200, only parsing) : bi_scope.
  Notation "'WPE' e @ s ; E [{ v , Q } ]" := (twp s E e%E (λ v, Q))
    (at level 20, e, Q at level 200,
     format "'[hv' 'WPE'  e  '/' @  '[' s ;  '/' E  ']' '/' [{  '[' v ,  '/' Q  ']' } ] ']'") : bi_scope.
  Notation "'WPE' e @ E [{ v , Q } ]" := (twp NotStuck E e%E (λ v, Q))
    (at level 20, e, Q at level 200,
     format "'[hv' 'WPE'  e  '/' @  E  '/' [{  '[' v ,  '/' Q  ']' } ] ']'") : bi_scope.
  Notation "'WPE' e @ E ? [{ v , Q } ]" := (twp MaybeStuck E e%E (λ v, Q))
    (at level 20, e, Q at level 200,
     format "'[hv' 'WPE'  e  '/' @  E  '/' ? [{  '[' v ,  '/' Q  ']' } ] ']'") : bi_scope.
  Notation "'WPE' e [{ v , Q } ]" := (twp NotStuck ⊤ e%E (λ v, Q))
    (at level 20, e, Q at level 200,
     format "'[hv' 'WPE'  e  '/' [{  '[' v ,  '/' Q  ']' } ] ']'") : bi_scope.
  Notation "'WPE' e ? [{ v , Q } ]" := (twp MaybeStuck ⊤ e%E (λ v, Q))
    (at level 20, e, Q at level 200,
     format "'[hv' 'WPE'  e  '/' ? [{  '[' v ,  '/' Q  ']' } ] ']'") : bi_scope.
  
  Implicit Types s : stuckness.
  Implicit Types P : iProp Σ.
  Implicit Types Φ : val Λ → iProp Σ.
  Implicit Types v : val Λ.
  Implicit Types e : expr Λ.
  Check twp_pre_mono.
  Print twp_pre.

  Lemma twp_strong_mono s1 s2 E1 E2 e Φ Ψ :
    s1 ⊑ s2 → E1 ⊆ E2 →
    WPE e @ s1; E1 [{ Φ }] -∗ (∀ v, Φ v ={E2}=∗ Ψ v) -∗ WPE e @ s2; E2 [{ Ψ }].
  Proof.
    iIntros (? HE) "H HΦ".
    iRevert (E2 Ψ HE) "HΦ".
    eiInduction "H" as "[* IH %Htv [%Ha %Hb] %HaPhi | * IH %Htv [%Ha %Hb] %HaPhi]"; iIntros (E2 Ψ HE) "HΦ"; 
    simplify_eq.
    - iApply twp_some.
      iExists _, _, _, _.
      iSplitL; [|repeat iSplit; done].
      iApply ("HΦ" with "[> -]").
      by iApply (fupd_mask_mono E _).
    - iApply twp_none.
      iExists _, _, _.
      iSplitL; [|repeat iSplit; done].
      iIntros (σ1 ns κs nt) "Hσ".
      iMod (fupd_mask_subseteq E) as "Hclose"; first done.
      iMod ("IH" with "[$]") as "[% IH]".
      iModIntro; iSplit; [by destruct s1, s2|]. iIntros (κ e2 σ2 efs Hstep).
      iMod ("IH" with "[//]") as (?) "(Hσ & IH & IHefs)"; auto.
      iMod "Hclose" as "_"; iModIntro.
      iFrame "Hσ". iSplit; first done. iSplitR "IHefs".
      + iDestruct "IH" as "[IH _]". iApply ("IH" with "[//] HΦ").
      + iApply (big_sepL_impl with "IHefs"); iIntros "!>" (k ef _) "[IH _]".
        iApply "IH"; auto.
  Qed. 

  Lemma fupd_twp s E e Φ : (|={E}=> WPE e @ s; E [{ Φ }]) ⊢ WPE e @ s; E [{ Φ }].
  Proof.
    iIntros "H". destruct (to_val e) as [v|] eqn:?.
    - iApply twp_some.
      iExists E, v, e, Φ.
      repeat iSplit; try done.
      iMod "H".
      eiDestruct "H" as "[% % % % H % [% %] % | % % % H % [% %] %]"; by simplify_eq.
    - iApply twp_none.
      iExists E, e, Φ.
      repeat iSplit; try done.
      iIntros (σ1 ns κs nt) "Hσ1". iMod "H".
      eiDestruct "H" as "[% % % % H % [% %] % | % % % H % [% %] %]"; simplify_eq.
      by iApply "H".
  Qed.      

  Lemma twp_fupd s E e Φ : WPE e @ s; E [{ v, |={E}=> Φ v }] ⊢ WPE e @ s; E [{ Φ }].
  Proof. iIntros "H". iApply (twp_strong_mono with "H"); auto. Qed.

  Lemma twp_bind K `{!LanguageCtx K} s E e Φ :
    WPE e @ s; E [{ v, WPE K (of_val v) @ s; E [{ Φ }] }] ⊢ WPE K e @ s; E [{ Φ }].
  Proof.
    revert Φ. cut (∀ Φ', WPE e @ s; E [{ Φ' }] -∗ ∀ Φ,
      (∀ v, Φ' v -∗ WPE K (of_val v) @ s; E [{ Φ }]) -∗ WPE K e @ s; E [{ Φ }]).
    { iIntros (help Φ) "H". iApply (help with "H"); auto. }
    iIntros (Φ') "H". 
    eiInduction "H" as "[* IH %Htv [%Ha %Hb] %HaPhi | * IH %Htv [%Ha %Hb] %HaPhi]"; iIntros (Φ'') "HΦ".
    - simplify_eq. apply of_to_val in Htv as <-. iApply fupd_twp. by iApply "HΦ".
    - iApply twp_none.
      iExists _, (K e1), _.
      simplify_eq.
      iSplitL; [|repeat iSplit; try done].
      2: { iPureIntro. by apply fill_not_val. }
      iIntros (σ1 ns κs nt) "Hσ". iMod ("IH" with "[$]") as "[% IH]".
      iModIntro; iSplit.
      { iPureIntro. unfold reducible_no_obs in *.
        destruct s; naive_solver eauto using fill_step. }
      iIntros (κ e2 σ2 efs Hstep).
      destruct (fill_step_inv e1 σ1 κ e2 σ2 efs) as (e2'&->&?); auto.
      iMod ("IH" $! κ e2' σ2 efs with "[//]") as (?) "(Hσ & IH & IHefs)".
      iModIntro. iFrame "Hσ". iSplit; first done. iSplitR "IHefs".
      + iDestruct "IH" as "[IH _]". by iApply "IH".
      + by setoid_rewrite and_elim_r.
  Qed.

End TWP.