% Implementing a reductive descent parser https://homes.cs.washington.edu/~bodik/ucb/cs164/sp12/lectures/08-parsers-in-prolog-sp12.pdf

kind ident type.
type iNamed string -> ident.
type iAnon term -> ident.

kind intro_pat type.
type iFresh, iDrop, iFrame, iPureIntro, iModalIntro, iSimpl, iDone, iForall, iAll intro_pat.
type iIdent ident -> intro_pat.
type iList list (list intro_pat) -> intro_pat.
type iPure option string -> intro_pat.
type iIntuitionistic intro_pat -> intro_pat.
type iSpatial intro_pat -> intro_pat.
type iModalElim intro_pat -> intro_pat.
type iRewrite direction -> intro_pat.
type iCoqIntro ltac1-tactic -> intro_pat.
% type iClear sel_pat -> intro_pat.
% type iClearFrame sel_pat -> intro_pat.

pred parse_ilist i:list token, o:list token, o:list (list intro_pat).
parse_ilist [tBracketR | TS] [tBracketR | TS] [[]].
parse_ilist TS R [IPS | LL'] :-
  parse_ip TS RT IP,
  (
    (
      RT = [tBar | RT'],
      parse_ilist RT' R LL',
      IPS = [IP]
    );
    (
      parse_ilist RT R [L | LL'],
      IPS = [IP | L]
    )
  ).

pred parse_conj_ilist i:list token, o:list token, o:list intro_pat.
parse_conj_ilist TS [tParenR | R] [IP] :- 
  parse_ip TS [tParenR | R] IP.
parse_conj_ilist TS R [IP | L'] :-
  parse_ip TS [tAmp | RT] IP,
  parse_conj_ilist RT R L'.

pred parse_ip i:list token, o:list token, o:intro_pat.
parse_ip [tName "_" | TS] TS iDrop.
parse_ip [tName X | TS] TS (iIdent (iNamed X)).
parse_ip [tAnon | TS] TS (iFresh).
parse_ip [tFrame | TS] TS (iFrame).
parse_ip [tForall | TS] TS (iForall).
parse_ip [tAll | TS] TS (iAll).
parse_ip [tSimpl | TS] TS (iSimpl).
parse_ip [tDone | TS] TS (iDone).
parse_ip [tPureIntro | TS] TS (iPureIntro).
parse_ip [tModalIntro | TS] TS (iModalIntro).

parse_ip [tBracketL | TS] TS' (iList L) :-
  parse_ilist TS [tBracketR | TS'] L.
parse_ip [tParenL | TS] TS' IP :-
  parse_conj_ilist TS [tParenR | TS'] L',
  {std.length L'} >= 2,
  foldr {std.drop-last 2 L'} (iList [{std.take-last 2 L'}]) (x\ a\ r\ r = iList [[x, a]]) IP.
parse_ip [tPure X | TS] TS (iPure X).
parse_ip [tIntuitionistic | TS] TS' (iIntuitionistic X) :-
  parse_ip TS TS' X.
parse_ip [tSpatial | TS] TS' (iSpatial X) :-
  parse_ip TS TS' X.
parse_ip [tModal | TS] TS' (iModalElim X) :-
  parse_ip TS TS' X.
parse_ip [tArrow D | TS] TS (iRewrite D).

pred parse_ipl i:list token, o:list intro_pat.
parse_ipl [] [].
parse_ipl TS [IP | IPS] :- 
  parse_ip TS R' IP, !, parse_ipl R' IPS.
parse_ipl TS _ :- !, coq.error { calc ("Failed to parse: " ^ {std.any->string TS})}.