shorten coq.ltac.{ open, thenl, all }.

type tc_solve open-tactic.
tc_solve G GL :- coq.ltac.call "tc_solve" [] G GL.

type pm_reduce open-tactic.
pm_reduce G GL :- coq.ltac.call "pm_reduce" [] G GL.

type pm_reflexivity open-tactic.
pm_reflexivity G GL :- coq.ltac.call "pm_reflexivity" [] G GL.

type pm_prettify open-tactic.
pm_prettify G GL :- coq.ltac.call "pm_prettify" [] G GL.

type simpl open-tactic.
simpl G GL :- coq.ltac.call "simpl" [] G GL.

type split open-tactic.
split G GL :- coq.ltac.call "split" [] G GL.

type done open-tactic.
done G GL :- coq.ltac.call "done" [] G GL.

pred refine.warn i:term, i:goal, o:list sealed-goal.
refine.warn T (goal _ RawEv Ty Ev _) GS :-
  rm-evar RawEv Ev,
  @keepunivs! => coq.elaborate-skeleton T Ty TR D,
  if (D = ok) true (coq.say "refine crashed" D, D = ok),
  coq.ltac.collect-goals TR GS _,
  RawEv = T,
  Ev = TR.

pred refine.norm i:term, i:goal, o:list sealed-goal.
refine.norm T (goal _ RawEv Ty Ev _) GS :-
  rm-evar RawEv Ev,
  @keepunivs! => coq.elaborate-skeleton T Ty TR D,
  if (D = ok) true (coq.say "refine crashed" D, D = ok),
  coq.reduction.lazy.bi-norm TR TR',
  coq.ltac.collect-goals TR' GS _,
  RawEv = T,
  Ev = TR'.

pred thenl! i:list tactic, i:sealed-goal, o:list sealed-goal.
thenl! [] G [G].
thenl! [T|Ts] G GS :- T G NG, !, all (thenl Ts) NG GS.

type false-error string -> open-tactic.
false-error S (goal _ _ {{ False }} _ _) _ :- !, coq.ltac.fail 0 S.
false-error _ G [seal G].

pred bi-normalize i:goal, o:list sealed-goal.
bi-normalize (goal _Ctx _Trigger Type _Proof _Args as G) GL :-
  coq.reduction.lazy.bi-norm Type Type',
  refine.warn {{ _ : lp:Type' }} G GL.

kind hole type.
type hole term -> term -> hole. % A pair of of Type, Proof

kind ihole type.
type ihole term -> hole -> ihole. % the anonymous iris hyp counter and the hole

pred ihole->string i:ihole, o:string.
ihole->string (ihole N (hole T P)) S :-
  S is {coq.term->string N} ^ " âŠ¢ " ^ {coq.term->string P} ^ " : \n" ^ {coq.term->string T}.

pred increase-ctx-count i:term, o:term.
increase-ctx-count N NS :-
  coq.reduction.vm.norm {{ Pos.succ lp:N }} _ NS.

pred get-ctx-count i:term, o:term.
get-ctx-count {{ envs_entails (Envs _ _ lp:N) _ }} N.
get-ctx-count T _ :-
  coq.error "get-ctx-count: type not of shape envs entails: " T.

pred set-ctx-count i:term, i:term, o:term.
set-ctx-count 
  {{ @envs_entails lp:PROP (@Envs lp:PROPE lp:EI lp:ES _) lp:P }}
  NS
  {{ @envs_entails lp:PROP (@Envs lp:PROPE lp:EI lp:ES lp:NS) lp:P }}.
set-ctx-count T N _ :-
  coq.error "set-ctx-count: type not of shape envs entails: " N T.

pred addN i:term, i:open-tactic, i:goal, o:list sealed-goal.
addN N T (goal Ctx Trigger Type Proof Args) GL :-
  pm-reduce Type Type',
  set-ctx-count Type' N NType,
  T (goal Ctx Trigger NType Proof Args) GL.
