accumulate eIris/common/stdpp.
accumulate eIris/proofmode/elpi/reduction.
accumulate eIris/proofmode/elpi/iris_ltac.
accumulate eIris/proofmode/elpi/eiris_tactics.

shorten coq.ltac.{ open, thenl, all }.

pred do-iPoseProper i:ihole, i:term, i:term, o:ident, o:ihole.
do-iPoseProper (ihole N (hole Type Proof)) R F (iAnon N) (ihole NS (hole PosedType PosedProof)) :-
  increase-ctx-count N NS,
  ident->term (iAnon N) _ NT,
  (@no-tc! => coq.elaborate-skeleton 
                {{ tac_pose_proof _ lp:NT _ _ (into_emp_valid_proj _ _ _ (iproper_top_to_iproper _ _ _ _ _ (_ : IProperTop lp:R lp:F _))) _}} 
                Type Proof ok),
  Proof = {{ tac_pose_proof _ _ _ _ (into_emp_valid_proj _ _ lp:IEVProof (iproper_top_to_iproper _ _ _ _ _ (lp:IPTProof : IProperTop _ _ _))) lp:PosedProof }},
  coq.ltac.collect-goals IEVProof [G1] _,
  open (coq.ltac.call "iIntoEmpValid" []) G1 TCGL,
  all (open tc_solve) TCGL [],
  coq.ltac.collect-goals IPTProof [G2] _,
  open tc_solve G2 [],
  coq.typecheck PosedProof NormType ok,
  pm-reduce NormType PosedType.

pred do-iApplyProper i:ihole, i:term, i:term, o:list ihole.
do-iApplyProper IH R F IHS :-
  if-debug (coq.say "do-iApplyProper"),
  do-iPoseProper IH R F ID IHPosed,
  if-debug (coq.say "Posed Lemma" {ihole->string IHPosed}),
  do-iApplyProper.aux IHPosed ID IHS.
do-iApplyProper.aux IH ID [IH'] :- 
  if-debug (coq.say "simpleApplyHyp"),
  do-iApplySimpleHyp IH ID IH'.
do-iApplyProper.aux IH ID [] :- 
  if-debug (coq.say "simpleApplyExact"),
  do-iApplySimpleExact IH ID.
do-iApplyProper.aux IH ID [IHL | IHS] :-
  if-debug (coq.say "specialize"),
  do-iSpecializeWand IH ID IHL IHR,
  if-debug (coq.say "Specialized Lemma" {ihole->string IHL} {ihole->string IHR}),
  do-iApplyProper.aux IHR ID IHS.

pred unfold-id i:string, i:term, o:term.
unfold-id S I O :- 
  coq.locate S (const IP),
  unfold-gref (const IP) I O.

pred unfold-gref i:gref, i:term, o:term.
unfold-gref (const IP) I O :-
  coq.env.const IP (some Bo) _,
  ((copy (global (const IP)) Bo :- !) => copy I I'),
  coq.reduction.lazy.bi-norm I' O.

pred do-steps i:ihole.
do-steps (ihole _ (hole Type _) as IH) :-
  if-debug (coq.say "================= Goal =================" {ihole->string IH} ""),
  do-steps.conn Type R LF RF, !,
  do-steps.do IH R LF RF.

pred do-steps.conn i:term, o:term, o:term, o:term.
do-steps.conn Type R LF RF:-
  top-relation Type R, !,
  relation-on Type LF RF.

pred top-relation i:term, o:term.
top-relation {{ envs_entails _ lp:{{ app PS }} }} C :- C = app {std.take 2 PS}.

pred relation-on i:term, o:term, o:term.
relation-on {{ envs_entails _ lp:{{ app AS }} }} L R :- 
  std.take-last 2 AS [L, R].

pred do-steps.do i:ihole, i:term, i:term, i:term.
do-steps.do IH {{ @iRespectful _ }} _ _ :- !,
  if-debug (coq.say "==>"),
  do-iIntros [iPure (none), iPure (none), iIntuitionistic iFresh] IH do-steps.
do-steps.do IH {{ @iPointwise_relation _ }} _ _ :- !,
  if-debug (coq.say ".>"), !,
  do-iIntros [iPure (none)] IH do-steps.
do-steps.do (ihole N H) {{ @iPersistent_relation _ }} _ _ :- !,
  if-debug (coq.say "â–¡>"),
  do-iModIntro H ModH, !,
  do-steps (ihole N ModH).
do-steps.do IH _ F F :-
  if-debug (coq.say "Applying wand identity" {coq.term->string F}),
  do-iIntros [iFresh, iDone] IH (_\ if-debug (coq.say "done failed"), fail).
do-steps.do IH _ F F :-
  if-debug (coq.say "Applying assumption" {coq.term->string F}),
  do-iIntros [iDone] IH (_\ if-debug (coq.say "done failed"), fail).
do-steps.do IH R (app [F | FS]) _ :- 
  std.exists { std.iota {calc ({std.length FS} + 1) } } (n\ std.take n FS FS'),
  if-debug (coq.say "Apply relation" {coq.term->string R} "with" {coq.term->string (app [F | FS'])}),
  do-iApplyProper IH R (app [F | FS']) HS, !,
  std.map HS (x\r\ do-steps x) _.
do-steps.do (ihole N (hole Type Proof)) _ (app [global (const F) | _ ]) _ :-
  if-debug (coq.say "Unfolding" F),
  unfold-gref (const F) Type UnfoldedType, !,
  do-steps (ihole N (hole UnfoldedType Proof)).
do-steps.do (ihole N (hole Type Proof)) _ (global (const F)) _ :-
  if-debug (coq.say "Unfolding" F),
  unfold-gref (const F) Type UnfoldedType, !,
  do-steps (ihole N (hole UnfoldedType Proof)).
do-steps.do IH _ _ _ :-
  if-debug (coq.say "Applying done"),
  do-iIntros [iDone] IH (_\ if-debug (coq.say "done failed"), fail).
do-steps.do _ T F _ :- !,
  if-debug (coq.say "No case for relation" T "with " F "ðŸ˜¢ stopping").

pred do-solve-proper i:hole.
do-solve-proper (hole Type Proof) :-
  unfold-id "IProper" Type UnfoldedType',
  coq.typecheck Proof UnfoldedType' ok,
  do-intros-forall (hole UnfoldedType' Proof) (h\ sigma IH\
    do-iStartProof h IH,
    do-steps IH
  ).
