accumulate eIris/common/stdpp.
accumulate eIris/proofmode/elpi/reduction.
accumulate eIris/proofmode/elpi/iris_ltac.
accumulate eIris/proofmode/elpi/eiris_tactics.

shorten coq.ltac.{ open, thenl, all }.

pred do-iPoseProper i:ihole, i:term, i:term, o:ident, o:ihole.
do-iPoseProper (ihole N (hole Type Proof)) R F (iAnon N) (ihole NS (hole PosedType PosedProof)) :-
  increase-ctx-count N NS,
  ident->term (iAnon N) _ NT,
  @no-tc! => coq.elaborate-skeleton 
                {{ tac_pose_proof _ lp:NT _ _ (into_emp_valid_proj _ _ _ (iproper_top_to_iproper _ _ _ _ _ (_ : IProperTop lp:R lp:F _))) _}} 
                Type Proof ok,
  Proof = {{ tac_pose_proof _ _ _ _ (into_emp_valid_proj _ _ lp:IEVProof (iproper_top_to_iproper _ _ _ _ _ (lp:IPTProof : IProperTop _ _ _))) lp:PosedProof }},
  coq.ltac.collect-goals IEVProof [G1] _,
  open (coq.ltac.call "iIntoEmpValid" []) G1 TCGL,
  all (open tc_solve) TCGL [],
  coq.ltac.collect-goals IPTProof [G2] _,
  open tc_solve G2 [],
  coq.typecheck PosedProof NormType ok,
  pm-reduce NormType PosedType.

pred go_iSpecializeWand i:ihole, i:ident, o:ihole, o:ihole.
go_iSpecializeWand (ihole N (hole Type Proof)) ID 
  (ihole N (hole LType LProof)) (ihole N (hole RType RProof)) :-
    ident->term ID _IDS IDT,
    @no-tc! => coq.elaborate-skeleton {{ tac_specialize_assert_no_am _ lp:IDT _ false [] _ _ _ _ _ _ _ _ _}} 
                Type Proof ok,
    Proof = {{ tac_specialize_assert_no_am _ _ _ _ _ _ _ _ _ _ lp:RefP lp:TC1P lp:TC2P lp:ConjP}},
    coq.ltac.collect-goals RefP [G1] _,
    open pm_reflexivity G1 [],
    coq.ltac.collect-goals TC1P [G2] _,
    open tc_solve G2 [],
    coq.ltac.collect-goals TC2P [G3] _,
    open tc_solve G3 [],
    coq.typecheck ConjP RedType ok,
    pm-reduce RedType ConjType,
    coq.elaborate-skeleton {{ conj _ _ }} ConjType ConjP ok,
    ConjP = {{ conj lp:LProof lp:RProof }},
    coq.typecheck LProof LType' ok,
    pm-reduce LType' LType,
    coq.typecheck RProof RType' ok,
    pm-reduce RType' RType.

pred do-iApplySimpleHyp i:ihole, i:ident, o:ihole.
do-iApplySimpleHyp (ihole N (hole Type Proof)) ID (ihole N (hole ApType ApProof)) :-
  ident->term ID _IDS IDT,
  @no-tc! => coq.elaborate-skeleton {{ tac_apply _ lp:IDT _ _ _ _ _ _ _ }} Type Proof ok,
  Proof = {{ tac_apply _ _ _ _ _ _ lp:RefProof lp:TCProof lp:ApProof }},
  coq.ltac.collect-goals RefProof [G1] _,
  open pm_reflexivity G1 [],
  coq.ltac.collect-goals TCProof [G2] _,
  open tc_solve G2 [],
  coq.typecheck ApProof RedType ok,
  pm-reduce RedType ApType.

pred do-iApplySimpleExact i:ihole, i:ident.
do-iApplySimpleExact (ihole _ (hole Type Proof)) ID :-
  ident->term ID _IDS IDT,
  @no-tc! => coq.elaborate-skeleton {{ tac_assumption _ lp:IDT _ _ _ _ _ _ }} Type Proof ok,
  Proof = {{ tac_assumption _ _ _ _ _ lp:RefProof lp:TCProof lp:RTCProof }},
  coq.ltac.collect-goals RefProof [G1] _,
  open pm_reflexivity G1 [],
  coq.ltac.collect-goals TCProof [G2] _,
  open tc_solve G2 [],
  coq.ltac.collect-goals RTCProof [G3] _,
  open (pm_reduce) G3 [G3'],
  open tc_solve G3' [].

pred do-iApplyProper i:ihole, i:term, i:term, o:list ihole.
do-iApplyProper IH R F IHS :-
  if-debug (coq.say "do-iApplyProper"),
  do-iPoseProper IH R F ID IHPosed,
  if-debug (coq.say "Posed Lemma" {ihole->string IHPosed}),
  do-iApplyProper.aux IHPosed ID IHS.
do-iApplyProper.aux IH ID [IH'] :- 
  if-debug (coq.say "simpleApplyHyp"),
  do-iApplySimpleHyp IH ID IH'.
do-iApplyProper.aux IH ID [] :- 
  if-debug (coq.say "simpleApplyExact"),
  do-iApplySimpleExact IH ID.
do-iApplyProper.aux IH ID [IHL | IHS] :-
  if-debug (coq.say "specialize"),
  go_iSpecializeWand IH ID IHL IHR,
  if-debug (coq.say "Specialized Lemma" {ihole->string IHL} {ihole->string IHR}),
  do-iApplyProper.aux IHR ID IHS.

pred unfold-id i:string, i:term, o:term.
unfold-id S I O :- 
  coq.locate S (const IP),
  unfold-gref (const IP) I O.

pred unfold-gref i:gref, i:term, o:term.
unfold-gref (const IP) I O :-
  coq.env.const IP (some Bo) _,
  ((copy (global (const IP)) Bo :- !) => copy I I'),
  coq.reduction.lazy.bi-norm I' O.

pred do-steps i:ihole.
do-steps (ihole _ (hole Type _) as IH) :-
  if-debug (coq.say "\n================= Goal =================" {ihole->string IH} ""),
  do-steps.conn Type R LF RF,
  do-steps.do IH R LF RF.

pred do-steps.open i:goal, o:list sealed-goal.
do-steps.open (goal _ _ Type Proof _) _ :-
  pm-reduce Type Type',
  get-ctx-count Type' N,
  do-steps (ihole N (hole Type' Proof)).

pred do-steps.conn i:term, o:term, o:term, o:term.
do-steps.conn Type R LF RF:-
  top-relation Type R, !,
  relation-on Type LF RF.

pred top-relation i:term, o:term.
top-relation {{ envs_entails _ lp:{{ app PS }} }} C :- C = app {std.take 2 PS}.

pred relation-on i:term, o:term, o:term.
relation-on {{ envs_entails _ lp:{{ app AS }} }} L R :- 
  std.take-last 2 AS [L, R].

pred do-steps.do i:ihole, i:term, i:term, i:term.
do-steps.do (ihole N (hole _ Proof)) {{ @iRespectful _ }} _ _ :- !,
  if-debug (coq.say "==>"),
  list->listterm [ {{ IPure (IGallinaAnon) }}, {{ IPure (IGallinaAnon) }}, {{ IIntuitionistic (IFresh) }} ] Args,
  coq.ltac.collect-goals Proof [G] _,
  open (addN N (coq.ltac.call "_iIntros0" [ trm Args ])) G [GIntro], !,
  open do-steps.open GIntro _.
do-steps.do (ihole N (hole _ Proof)) {{ @iPointwise_relation _ }} _ _ :- !,
  if-debug (coq.say ".>"),
  list->listterm [ {{ IPure (IGallinaAnon) }} ] Args,
  coq.ltac.collect-goals Proof [G] _,
  open (addN N (coq.ltac.call "_iIntros0" [ trm Args ])) G [GIntro], !,
  open do-steps.open GIntro _.
do-steps.do (ihole N H) {{ @iPersistent_relation _ }} _ _ :- !,
  if-debug (coq.say "â–¡>"),
  do-iModIntro H ModH, !,
  do-steps (ihole N ModH).
do-steps.do (ihole _ (hole _ Proof)) _ F F :-
  if-debug (coq.say "Applying assumption" {coq.term->string F}),
  list->listterm [ {{ IFresh }}, {{ IDone }} ] Args,
  coq.ltac.collect-goals Proof [G] _,
  open (coq.ltac.call "_iIntros0" [ trm Args ]) G [].  % Should have an addN but crashes for some reason
do-steps.do (ihole _ (hole _ Proof)) _ F F :-
  if-debug (coq.say "Applying assumption" {coq.term->string F}),
  list->listterm [ {{ IDone }} ] Args,
  coq.ltac.collect-goals Proof [G] _,
  open (coq.ltac.call "_iIntros0" [ trm Args ]) G [].  % Should have an addN but crashes for some reason
do-steps.do IH R (app [F | FS]) _ :- 
  std.exists { std.iota {calc ({std.length FS} + 1) } } (n\ std.take n FS FS'),
  if-debug (coq.say "Apply relation" {coq.term->string R} "with" {coq.term->string (app [F | FS'])}),
  do-iApplyProper IH R (app [F | FS']) HS, !,
  std.map HS (x\r\ do-steps x) _.
do-steps.do (ihole N (hole Type Proof)) _ (app [global (const F) | _ ]) _ :-
  if-debug (coq.say "Unfolding" F),
  unfold-gref (const F) Type UnfoldedType, !,
  do-steps (ihole N (hole UnfoldedType Proof)).
do-steps.do (ihole N (hole Type Proof)) _ (global (const F)) _ :-
  if-debug (coq.say "Unfolding" F),
  unfold-gref (const F) Type UnfoldedType, !,
  do-steps (ihole N (hole UnfoldedType Proof)).
do-steps.do (ihole _ (hole _ Proof)) _ _ _ :-
  if-debug (coq.say "Applying done"),
  list->listterm [ {{ IDone }} ] Args,
  coq.ltac.collect-goals Proof [G] _,
  open (coq.ltac.call "_iIntros0" [ trm Args ]) G [].  % Should have an addN but crashes for some reason
do-steps.do _ T F _ :- !,
  if-debug (coq.say "No case for relation" {coq.term->string T} "with " {coq.term->string F} "ðŸ˜¢ stopping").

pred do-solve-proper i:hole.
do-solve-proper (hole Type Proof) :-
  unfold-id "IProper" Type UnfoldedType',
  coq.typecheck Proof UnfoldedType' ok,
  do-intros-forall (hole UnfoldedType' Proof) (h\ sigma IH\
    do-iStartProof h IH,
    do-steps IH
  ).
