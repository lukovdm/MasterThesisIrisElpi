accumulate eIris/common/stdpp.

pred reduction-rule o:constant.

pred add-reduction-rule i:constant.
add-reduction-rule C :-
  coq.elpi.accumulate _ "reduction.db" (clause _ _ (reduction-rule C)).

pred all-reductions o:list constant.
all-reductions CS :-
  std.findall (reduction-rule _) Rules,
  std.map Rules (x\r\ x = (reduction-rule r)) CS.

pred pm-reduce i:term, o:term.
pm-reduce T O :-
  all-reductions Consts,
  std.assert! ({std.length Consts} > 0) "No reduction rules found",
  std.map Consts (x\r\ r = coq.redflags.const x) Deltas,
  coq.redflags.add coq.redflags.betaiotazeta Deltas RF,
  @redflags! RF => coq.reduction.cbv.norm T O.

pred pm-reduce-goal i:goal, o:list sealed-goal.
pm-reduce-goal (goal _ _ Type _ _ as G) GL :-
  pm-reduce Type Type',
  refine {{ _ : lp:Type' }} G GL.
