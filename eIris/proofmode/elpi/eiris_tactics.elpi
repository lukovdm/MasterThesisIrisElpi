shorten coq.ltac.{ open, thenl, all }.

pred ident->term i:ident, o:string, o:term.
ident->term (iNamed S) S T :- !,
  string->stringterm S ST,
  T = {{ INamed lp:ST }}.
ident->term (iAnon N) "anon" T :- !,
  T = {{ IAnon lp:N }}.

type ident_for_pat intro_pat -> ident -> tactic.
ident_for_pat (iIdent ID) ID G [G].
ident_for_pat _ (iAnon NT) G GL :-
  open (go_iFresh NT) G GL.

type ident_for_pat.default intro_pat -> ident -> ident -> tactic.
ident_for_pat.default (iIdent ID) _ ID G [G].
ident_for_pat.default _ (iAnon NT) (iAnon NT) _G _GL.
ident_for_pat.default _ _ (iAnon NT) G GL :-
  open (go_iFresh NT) G GL.

type go_iStartProof open-tactic.
go_iStartProof (goal _Ctx _Trigger {{ let _ := _ in _ }} _Proof [] as _G) _GL :- !,
  coq.error "iStartProof: goal is a `let`, use `simpl`, `intros x`, `iIntros (x)`, or `iIntros ""%x""".
go_iStartProof (goal _Ctx _Trigger {{ envs_entails _ _ }} _Proof [] as G) [seal G].
go_iStartProof (goal _Ctx _Trigger Type _Proof [] as G) GL :- 
  refine {{ as_emp_valid_2 lp:Type _ (tac_start _ _) }} G GL.

type go_iFresh term -> open-tactic.
go_iFresh N (goal _Ctx _Trigger {{ envs_entails (Envs lp:DP lp:DS lp:N) lp:Q }} _Proof _Args as G) GL :-
  refine {{_ : (envs_entails (Envs lp:DP lp:DS (Pos.succ lp:N)) lp:Q) }} G GL.

type go_intro string -> open-tactic.
go_intro ID G GL :-
  std.assert! (coq.ltac.id-free? ID G) "eiIntro: name already taken",
  coq.id->name ID N,
  refine (fun N _ _) G GL.

type go_iExFalso tactic.
go_iExFalso G GL :-
  open go_iStartProof G [G'],
  open (refine {{ @tac_ex_falso _ _ _ _ }}) G' GL.

type go_iClear ident -> tactic.
go_iClear ID G GL :-
  ident->term ID IDS IDT,
  open (refine {{ @tac_clear _ _ lp:IDT _ _ _ _ _ _ }}) G [G1, G2, G3],
  (open pm_reflexivity G1 []; coq.ltac.fail 0 "iClear:" IDS "not found"),
  (
    thenl [
      open pm_reduce,
      open tc_solve
    ] G2 []; 
    coq.ltac.fail 0 "iClear:" IDS "not affine and the goal not absorbing"
  ),
  thenl [
    open pm_reduce,
    open simpl,
  ] G3 GL.

type go_iPoseLem term -> ident -> tactic.
go_iPoseLem Lem (iAnon N) G GL :-
  open go_iStartProof G [GoalStarted],
  open (go_iFresh N) GoalStarted [GoalFresh],
  ident->term (iAnon N) _ NT,
  @no-tc! => open (refine.warn {{ tac_pose_proof _ lp:NT _ _ (into_emp_valid_proj _ _ _ lp:Lem) _}}) GoalFresh [G1, G2],
  open (coq.ltac.call "iIntoEmpValid" []) G1 TCGL,
  all (open tc_solve) TCGL [],
  thenl [
    open pm_reduce,
    open (false-error "iPoseLem: not fresh"),
  ] G2 GL.

type go_iIntuitionistic ident -> tactic.
go_iIntuitionistic ID G [GRes] :-
  ident->term ID X T,
  open go_iStartProof G [G'],
  @no-tc! => open (refine {{ tac_impl_intro_intuitionistic _ lp:T _ _ _ _ _ _ _ }}) G' [GI1, GI2, GI3],
  open (tc_solve) GI1 [], 
  !,
  (open (tc_solve) GI2 []; coq.ltac.fail 0 "eiIntuitionistic: not intuitionistic"),
  open (pm_reduce) GI3 [GI4],
  open (false-error {calc ("eiIntuitionistic: " ^ X ^ " not fresh")}) GI4 [GRes].
go_iIntuitionistic ID G [GRes] :-
  ident->term ID X T,
  open go_iStartProof G [G'],
  @no-tc! => open (refine {{ tac_wand_intro_intuitionistic _ lp:T _ _ _ _ _ _ _ _ }}) G' [GW1, GW2, GW3, GW4],
  open (tc_solve) GW1 [], 
  !,
  (open (tc_solve) GW2 []; coq.ltac.fail 0 "eiIntuitionistic: not intuitionistic"),
  (open (tc_solve) GW3 []; coq.ltac.fail 0 "eiIntuitionistic: not affine and the goal not absorbing"),
  open (pm_reduce) GW4 [GW5],
  open (false-error {calc ("eiIntuitionistic: " ^ X ^ " not fresh")}) GW5 [GRes].
go_iIntuitionistic ID _ _ :- !,
  ident->term ID X _,
  coq.ltac.fail 0 {calc ("eiIntuitionistic: " ^ X ^ " could not introduce")}.

type go_iAndDestruct ident -> ident -> ident -> tactic.
go_iAndDestruct HID H1ID H2ID G GL :-
  ident->term HID ID HIDT,
  ident->term H1ID _ H1IDT,
  ident->term H2ID _ H2IDT,
  open (refine {{ @tac_and_destruct _ _ lp:HIDT _ lp:H1IDT lp:H2IDT _ _ _ _ _ _ _ }}) G [G1, G2, G3],
  (open pm_reflexivity G1 []; coq.ltac.fail 0 "iAndDestruct:" ID "not found"),
  (
    thenl [
      open pm_reduce,
      open tc_solve
    ] G2 []; 
    coq.ltac.fail 0 "iAndDestruct: cannot destruct"
  ),
  thenl [
    open pm_reduce,
    open simpl,
    open (false-error "iAndDestruct: left or right not fresh")
  ] G3 GL.

type go_iOrDestruct ident -> ident -> ident -> tactic.
go_iOrDestruct HID H1ID H2ID G GL :-
  ident->term HID ID HIDT,
  ident->term H1ID _ H1IDT,
  ident->term H2ID _ H2IDT,
  open (refine {{ @tac_or_destruct _ _ lp:HIDT _ lp:H1IDT lp:H2IDT _ _ _ _ _ _ _ }}) G [G1, G2, G3],
  (open pm_reflexivity G1 []; coq.ltac.fail 0 "iOrDestruct:" ID "not found"),
  (open tc_solve G2 []; coq.ltac.fail 0 "iOrDestruct: cannot destruct"),
  thenl [
    open pm_reduce,
    open (false-error "iAndDestruct: left or right not fresh"),
    open split
  ] G3 GL.

type go_iExistDestruct ident -> option string -> ident -> tactic.
go_iExistDestruct ID X HID G GL :- !,
  ident->term ID _ IDT,
  ident->term HID _ HIDT,
  open (refine {{ @tac_exist_destruct_without_name _ _ _ lp:IDT _ lp:HIDT _ _ _ _ _ _ _ }}) G [G1, G2, G3],
  (open pm_reflexivity G1 []; coq.ltac.fail 0 "iExistDestruct:" ID "not found"),
  (open tc_solve G2 []; coq.ltac.fail 0 "iExistDestruct: cannot destruct"),
  if (X = some XN) 
    (open (go_intro XN) G3 [G4])
    (open (coq.ltac.call "intros_anon" []) G3 [G4]),
  open pm_reduce G4 [G5],
  open simpl G5 [G6],
  open (false-error "iExistDestruct: name already in use.") G6 GL.
  % Why does into Exists have a name?

type go_iExact ident -> tactic.
go_iExact ID G [] :-
  ident->term ID _ IDT,
  open (refine {{ @tac_assumption _ _ lp:IDT _ _ _ _ _ _ }}) G [G1, G2, G3],
  (open pm_reflexivity G1 []; coq.ltac.fail 0 "iExact:" ID "not found"),
  (open tc_solve G2 []; coq.ltac.fail 0 "iExact:" ID "does not match goal"),
  (
    thenl [
      open pm_reduce,
      open tc_solve
    ] G3 [];
    coq.ltac.fail 0 "iExact: remaining hypotheses not affine and the goal not absorbing"
  ).

pred go_iDestruct i:ident, o:intro_pat, i:sealed-goal, o:list sealed-goal.
% go_iDestruct ID IP _ _ :- coq.say "go_iDestruct: " ID IP, fail.
go_iDestruct ID (iIdent ID) G [G].
go_iDestruct (iAnon _) iFresh G [G]. 
go_iDestruct ID iDrop G GL :-
  go_iClear ID G GL.
go_iDestruct ID (iList [[]]) G GL :-
  thenl [
    go_iExFalso,
    go_iExact ID
  ] G GL.
go_iDestruct ID (iList [[iPure PN, IP]]) G GL :- !,
  ident_for_pat.default IP ID HID G [G'],
  go_iExistDestruct ID PN HID G' [G''],
  go_iDestruct HID IP G'' GL.
  % This case now also handles the pure and case with typeclasses,
  % however, that is not neccessary as we can just backtrack in here
  % And take the next case if iExistsDestruct fails.
go_iDestruct ID (iList [[IP1, IP2]]) G GL :-
  ident_for_pat.default IP1 ID ID1 G [G'],
  ident_for_pat IP2 ID2 G' [G''],
  thenl [
    go_iAndDestruct ID ID1 ID2,
    go_iDestruct ID1 IP1,
    go_iDestruct ID2 IP2
  ] G'' GL.
go_iDestruct ID (iList [[IP1], [IP2]]) G GL :-
  ident_for_pat.default IP1 ID ID1 G [G'],
  ident_for_pat IP2 ID2 G' [G''],
  go_iOrDestruct ID ID1 ID2 G'' [G1, G2],
  go_iDestruct ID1 IP1 G1 GL1,
  go_iDestruct ID2 IP2 G2 GL2,
  std.append GL1 GL2 GL.
go_iDestruct _ IP G [G] :-
  coq.say "eiDestruct: Skipping " {std.any->string IP}.

type go_iIntros (list intro_pat) -> tactic.
:name "go_iIntros.start"
go_iIntros [] G [G].
go_iIntros [iCoqIntro X | IPS] G GL :-
  thenl [
    open (coq.ltac.call-ltac1 X),
    go_iIntros IPS
  ] G GL.
go_iIntros [iSimpl | IPS] G GL :-
  open simpl G [G'],
  go_iIntros IPS G' GL.
go_iIntros [iDone | IPS] G GL :-
  (open done G [G']; G' = G),
  go_iIntros IPS G' GL.
go_iIntros [iDrop | IPS] G GL :- !,
  open go_iStartProof G [G'],
  (
    open (refine {{ tac_impl_intro_drop _ _ _ _ _ _ }}) G' [GRes];
    open (refine {{ tac_wand_intro_drop _ _ _ _ _ _ _ }}) G' [GRes];
    % TODO: Not sure what the forall case is.
    (!, coq.ltac.fail 0 "eiIntro: Could not introduce", fail)
  ),
  go_iIntros IPS GRes GL.
go_iIntros [iPure (some X) | IPS] G GL :- !,
  open go_iStartProof G [StartedG],
  open (refine {{ tac_forall_intro_nameless _ _ _ _ _ _ }}) StartedG [G'],
  open (go_intro X) G' [G''],
  open bi-normalize G'' [G'''],
  go_iIntros IPS G''' GL.
go_iIntros [iPure (none) | IPS] G GL :-
  open go_iStartProof G [StartedG],
  open (refine {{ tac_forall_intro_nameless _ _ _ _ _ _ }}) StartedG [G'],
  open (coq.ltac.call "intros_anon" []) G' [G''],
  open bi-normalize G'' [G'''],
  go_iIntros IPS G''' GL.
go_iIntros [iIdent ID | IPS] G GL :-
  ident->term ID X T,
  open go_iStartProof G [G'],
  (
    open (refine {{ @tac_impl_intro _ _ lp:T _ _ _ _ _ _ _ }}) G' [GRes];
    (
      open (refine {{ @tac_wand_intro _ _ lp:T _ _ _ _ _ }}) G' [G''], !,
      open (pm_reduce) G'' [G'''],
      open (false-error {calc ("eiIntro: " ^ X ^ " not fresh")}) G''' [GRes]
      );
    (!, coq.ltac.fail 0 {calc ("eiIntro: " ^ X ^ " could not introduce")}, fail)
  ),
  go_iIntros IPS GRes GL.
go_iIntros [iIntuitionistic iFresh | IPS] G GL :- !,
  open go_iStartProof G [StartedGoal],
  open (go_iFresh N) StartedGoal [FreshGoal],
  go_iIntuitionistic (iAnon N) FreshGoal [IntroGoal],
  go_iIntros IPS IntroGoal GL.
go_iIntros [iIntuitionistic (iIdent ID) | IPS] G GL :-
  open go_iStartProof G [G'],
  go_iIntuitionistic ID G' [GRes],
  go_iIntros IPS GRes GL.
go_iIntros [iIntuitionistic (iList IPS) | IPSS] G GL :-
  open go_iStartProof G [StartedGoal],
  open (go_iFresh N) StartedGoal [FreshGoal],
  go_iIntuitionistic (iAnon N) FreshGoal [IntroGoal],
  go_iDestruct (iAnon N) (iList IPS) IntroGoal GL',
  all (go_iIntros IPSS) GL' GL.
go_iIntros [iList IPS | IPSS] G GL :- !,
  open go_iStartProof G [StartedGoal],
  open (go_iFresh N) StartedGoal [FreshGoal],
  go_iIntros [iIdent (iAnon N)] FreshGoal [IntroGoal],
  go_iDestruct (iAnon N) (iList IPS) IntroGoal GL',
  all (go_iIntros IPSS) GL' GL.