accumulate eIris/proofmode/elpi/proper_solver.


pred constructor->term i:indc-decl, o:term.
constructor->term (constructor _ Arity) T :- coq.arity->term Arity T.


pred find-PROP i:term, o:term.
find-PROP (prod _ _ F) O :- !,
  (pi x\ find-PROP (F x) O).
find-PROP O O :- !.


pred type-to-fun i:term, o:term.
type-to-fun (prod N T F) (fun N T FB) :- !,
  (pi x\ type-to-fun (F x) (FB x)).
type-to-fun X X :- !.


pred init-prod-to-bi-exist i:term, o:term.
init-prod-to-bi-exist (prod N T F) {{ bi_exist lp:Fun}} :- !,
  (pi x\ init-prod-to-bi-exist (F x) (F' x)),
  Fun = (fun N T F').
init-prod-to-bi-exist X X.


pred last-rec-to-and i:term, i:list term, i:term, o:term.
last-rec-to-and A B {{ bi_exist lp:{{ fun N T F}} }} {{ bi_exist lp:{{ fun N T F' }} }} :- !,
  (pi x\ last-rec-to-and A B (F x) (F' x)).
last-rec-to-and A B {{ bi_sep lp:L lp:R }} {{ bi_sep lp:L lp:R' }} :- !,
  last-rec-to-and A B R R'.
last-rec-to-and A B {{ bi_or lp:L lp:R }} {{ bi_or lp:L' lp:R' }} :- !,
  last-rec-to-and A B L L',
  last-rec-to-and A B R R'.
last-rec-to-and F [] (app [F]) {{ True }}.
last-rec-to-and F [L | LS] (app [F, T | TS]) TS' :-
  {std.length LS} = {std.length TS}, !,
  std.fold2 LS TS {{ (⌜lp:L = lp:T⌝)%I }} (l\ t\ a\ r\ sigma TMP\ TMP = {{ (⌜lp:l = lp:t⌝)%I }}, r = {{ (lp:a ∗ lp:TMP)%I }}) TS'.
last-rec-to-and _ [_ | _] (app [T | TS]) _ :-
  coq.error "EI.Ind: " {coq.term->string (app [T | TS])} "has to many or to few arguments".


pred top-wand-to-sepand i:term, o:term.
top-wand-to-sepand {{ bi_emp_valid lp:T }} T' :- !,
  top-wand-to-sepand T T'.
top-wand-to-sepand {{ bi_exist lp:{{ fun N T F}} }} {{ bi_exist lp:{{ fun N T F' }} }} :- !,
  (pi x\ top-wand-to-sepand (F x) (F' x)).
top-wand-to-sepand {{ bi_forall lp:{{ fun N T F}} }} {{ bi_forall lp:{{ fun N T F' }} }} :- !,
  (pi x\ top-wand-to-sepand (F x) (F' x)).
top-wand-to-sepand {{ bi_wand lp:L lp:R }} {{ bi_sep lp:L lp:R' }} :- !,
  top-wand-to-sepand R R'.
top-wand-to-sepand {{ bi_sep lp:L lp:R }} {{ bi_sep lp:L lp:R' }} :- !,
  top-wand-to-sepand R R'.
top-wand-to-sepand X X :- !.


pred mk-constr-body-disj i:term, i:(term -> list indc-decl), o:int, o:(term -> list indc-decl), o:(term -> term).
mk-constr-body-disj FType Constructors NConstr BIConstructors ConstrBo :-
  if-debug (coq.sigma.print),
  if-debug ((pi x\ print-contructors (Constructors x))),
  (pi f\ std.length (Constructors f) NConstr),
  % Transform base constructor into shape of a bi prop
  (pi f\ std.map (Constructors f)
    (x\ r\ sigma TMP1 TMP2\ 
      constructor->term x TMP1, 
      init-prod-to-bi-exist TMP1 TMP2, 
      top-wand-to-sepand TMP2 r)
    (ConstrBiTerms f)),
  % Create constructors for later use in induction.
  coq.string->name "F" N,
  (@pi-decl N FType f\ std.map2 (Constructors f) (ConstrBiTerms f)
                 (x\ y\ r\ sigma ID Y\ x = constructor ID _, std.assert-ok! (coq.elaborate-skeleton y _ Y) "eiris Failed", r = constructor ID (arity Y))
                 (BIConstructors f)),
  if-debug ((pi f\ coq.say "------ Constructor Bi Terms" {std.map (ConstrBiTerms f) coq.term->string})),
  % connect constructors with bi_or's
  (pi f\ std.fold-right
    { std.drop-last 1 (ConstrBiTerms f) }
    { std.last (ConstrBiTerms f) }
    (x\ a\ r\ r = {{ bi_or lp:x lp:a }}) 
    (ConstrBo f)),
  if-debug (coq.say "------ Constructor body disjunction" {coq.term->string (ConstrBo {{ True }})}).


pred mk-constr-body i:list param, i:term, i:(term -> list indc-decl), o:int, o:(term -> list indc-decl), o:term, o:term.
mk-constr-body Params TypeTerm Constructors NConstr BIConstructors EBo Ty :-
  find-PROP TypeTerm PROP,
  mk-constr-body-disj TypeTerm Constructors NConstr BIConstructors ConstrBo,
  (pi b\ (type-to-fun PROP b :- !) => type-to-fun TypeTerm (FunTerm b)),
  (pi b\
    % Save the variables of functions in a list
    (pi N T T1 F F1 A \ fold-map (fun N T F) A (fun N T1 F1) A :- !,
                                fold-map T A T1 _, pi x\ fold-map (F x) [x | A] (F1 x) _) => 
    % When we hit our placeholder for the function body we replace it with the function body with the last application replaced by equalities for the arguments
    (pi L L' F B \ fold-map b L B L :- !, std.rev L [F | L'], last-rec-to-and F L' (ConstrBo F) B) => 
        fold-map {{fun F : lp:TypeTerm => lp:{{ FunTerm b }} }} [] Bo _),
  replace-params-bo Params Bo PBo,
  if-debug (coq.say "------- Body" { coq.term->string PBo }),
  replace-params-ty Params {{ lp:TypeTerm -> lp:TypeTerm }} Ty, !,
  if-debug (coq.say "------- Type" { coq.term->string Ty }),
  @keepunivs! => std.assert-ok! (coq.elaborate-skeleton PBo Ty EBo) "Type check body failed".


pred mk-proper i:list param, i:term, i:term, o:term.
mk-proper Params F Type EBo :-
  find-PROP Type PROP,
  (pi N T F A T1 F1 A1 \ fold-map (prod N T F) A (prod N T1 F1) (some {{ (.> lp:A1)%i_signature }}) :-
        fold-map T A T1 _, !, (pi x\ fold-map (F x) A (F1 x) (some A1))) =>
    (pi A \ fold-map PROP A PROP (some {{ bi_wand }}) :- !) =>
      fold-map Type none Type (some R),
  std.map Params (x\r\ x = (par _ _ _ r)) Ps,
  Fapp = app [F | Ps],
  replace-params-ty Params {{ IProper (□> lp:R ==> lp:R) lp:Fapp }} Proper,
  @keepunivs! => std.assert-ok! (coq.elaborate-skeleton Proper {{ Prop }} EBo) "Type check proper failed".


pred proper-proof i:term, o:term.
proper-proof Proper Proof :-
  coq.typecheck Proof Proper ok,
  do-solve-proper (hole Proper Proof).


pred mk-fixpoint.fun i:term, i:list param, i:term, i:term, i:list term, o:term.
mk-fixpoint.fun Pre Params Type (prod N T F) L (fun N T F') :-
  pi x\ mk-fixpoint.fun Pre Params Type (F x) [x | L] (F' x).
mk-fixpoint.fun Pre Params Type _ RevL {{ bi_forall lp:F }} :-
  std.rev RevL L,
  F = fun _ Type Forall,
  pi phi\ ( sigma AppPhi\ sigma Prem\
    AppPhi = app [phi | L],
    mk-fixpoint.forall Pre Params phi [] Type Prem,
    Forall phi = {{ bi_wand (□ lp:Prem) lp:AppPhi }}
  ).

pred mk-fixpoint.forall i:term, i:list param, i:term, i:list term, i:term, o:term.
mk-fixpoint.forall Pre Params Phi Xs (prod N T F) {{ bi_forall lp:Fun }} :-
  Fun = fun N T F',
  pi x\ mk-fixpoint.forall Pre Params Phi [x | Xs] (F x) (F' x).
mk-fixpoint.forall Pre Params Phi RevXs _ {{ bi_wand lp:L lp:R }} :-
  std.rev RevXs Xs,
  std.map Params (x\r\ x = par _ _ _ r) Ps,
  L = app { std.append [Pre | Ps] [Phi | Xs] },
  R = app [Phi | Xs].

pred mk-fixpoint i:list param, i:term, i:term, o:term.
mk-fixpoint Params Type Pre Fixpoint :-
  mk-fixpoint.fun Pre Params Type Type [] Fixpoint',
  replace-params-bo Params Fixpoint' Fixpoint,
  if-debug (coq.say "----- Fixpoint Body" {coq.term->string Fixpoint}),
  coq.typecheck Fixpoint _ D, 
  if (D = ok) (true) (coq.error D).


pred mk-fix-toproof i:(list term -> list term -> term -> prop), i:list param, i:term, i:list term, i:list term, i:term, o:term.
mk-fix-toproof MK Params Pre Fixes Xs (prod N T F) (prod N T F') :-
  @pi-decl N T x\ mk-fix-toproof MK Params Pre Fixes [x | Xs] (F x) (F' x).
mk-fix-toproof MK Params Pre Fixes RevXs _ Res :-
  std.rev RevXs Xs,
  std.map Params (x\r\ x = par _ _ _ r) Ps,
  std.map Fixes (f\r\ sigma App\ std.append [Pre | Ps] [app [f | Ps] | Xs] App, r = app App) Unfolds,
  std.map Fixes (f\r\ sigma App\ std.append Ps Xs App, r = app [f | App]) Folds,
  MK Unfolds Folds Res.


pred mk-unfold-2.proof i:int, i:int, i:term, i:term, i:hole.
mk-unfold-2.proof Ps N Proper Mono (hole Type Proof) :-
  do-intros-forall (hole Type Proof) (mk-unfold-2.proof-1 Ps N Proper Mono).

pred mk-unfold-2.proof-1 i:int, i:int, i:term, i:term, i:hole.
mk-unfold-2.proof-1 Ps N Proper Mono H :-
  do-iStartProof H IH, !,
  if-debug (coq.say "started proof unfold_2" {ihole->string IH}),
  do-iIntros [iIdent (iNamed "HF"), iPure none, 
              iIntuitionistic (iIdent (iNamed "HI")), 
              iHyp "HI"] IH (mk-unfold-2.proof-2 Ps N Proper Mono).

pred mk-unfold-2.proof-2 i:int, i:int, i:term, i:term, i:ihole.
mk-unfold-2.proof-2 Ps N Proper Mono IH :-
  ((copy {{ @IProper }} {{ @iProper }} :- !) => copy Mono MonoiProper'),
  type-to-fun MonoiProper' MonoiProper,
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes, !,
  do-iApplyLem (app [MonoiProper | Holes]) IH [(h\ sigma PType\ sigma PProof\ sigma List\ sigma Holes2\ !,
    h = hole PType PProof,
    std.iota Ps List,
    std.map List (x\r\ r = {{ _ }}) Holes2,
    coq.elaborate-skeleton (app [Proper | Holes2]) PType PProof D,
    if (D = ok) (true) (if-debug (coq.say "IProper error" D), fail)
  )] [IH1, IH2],
  if-debug (coq.say "pre apply HF" {ihole->string IH2}), !,
  do-iApplyHyp "HF" IH2 [], !,
  std.map {std.iota N} (x\r\ r = iPure none) Pures, !,
  do-iIntros {std.append [iModalIntro | Pures] [iIdent (iNamed "H"), iHyp "H", iModalIntro, iHyp "HI"]} IH1 (ih\ true).

pred mk-unfold-2 i:list param, i:term, i:term, i:term, i:term, i:term, o:hole.
mk-unfold-2 Params Pre Proper Mono Fix Type (hole ToProof Proof) :-
  mk-fix-toproof (u\f\res\ sigma U\ sigma F\ u = [U], f = [F], res = {{ lp:U ⊢ lp:F }}) Params Pre [Fix] [] Type ToProof', !,
  replace-params-ty Params ToProof' ToProof, !,
  if-debug (coq.say "unfold 2:" {coq.term->string ToProof}),
  mk-unfold-2.proof {std.length Params} {type-depth Type} Proper Mono (hole ToProof Proof).


pred mk-unfold-1.proof i:int, i:int, i:term, i:term, i:term, i:hole.
mk-unfold-1.proof Ps N Unfold2 Proper Mono (hole Type Proof) :-
  do-intros-forall (hole Type Proof) (mk-unfold-1.proof-1 Ps N Unfold2 Proper Mono).

pred mk-unfold-1.proof-1 i:int, i:int, i:term, i:term, i:term, i:hole.
mk-unfold-1.proof-1 Ps N Unfold2 Proper Mono H :-
  do-iStartProof H IH', !,
  if-debug (coq.say "started proof unfold_1" {ihole->string IH'}),
  std.map {std.iota N} (x\r\ r = iPure none) Pures, !,
  do-iIntros { std.append [iIdent (iNamed "HF"), iHyp "HF", iModalIntro | Pures]
                          [iIdent (iNamed "Hy")] } 
              IH' (mk-unfold-1.proof-2 Ps N Unfold2 Proper Mono).
              
pred mk-unfold-1.proof-2 i:int, i:int, i:term, i:term, i:term, i:ihole.
mk-unfold-1.proof-2 Ps N Unfold2 Proper Mono IH :-
  ((copy {{ @IProper }} {{ @iProper }} :- !) => copy Mono MonoiProper'),
  type-to-fun MonoiProper' MonoiProper,
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes, !,
  do-iApplyLem (app [MonoiProper | Holes]) IH [(h\ sigma PType\ sigma PProof\ sigma List\ sigma Holes2\ !,
    h = hole PType PProof,
    std.iota Ps List,
    std.map List (x\r\ r = {{ _ }}) Holes2,
    coq.elaborate-skeleton (app [Proper | Holes2]) PType PProof D,
    if (D = ok) (true) (if-debug (coq.say "IProper error" D), fail)
  )] [IH1, IH2],
  do-iApplyHyp "Hy" IH2 [], !,
  std.map {std.iota N} (x\r\ r = iPure none) Pures, !,
  do-iIntros {std.append [iModalIntro | Pures] [iIdent (iNamed "HF")]} IH1 (mk-unfold-1.proof-3 Ps Unfold2).

pred mk-unfold-1.proof-3 i:int, i:term, i:ihole.
mk-unfold-1.proof-3 Ps Unfold2 IH :-
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes, !,
  do-iApplyLem (app [Unfold2 | Holes]) IH [] [AppliedIH], !,
  do-iApplyHyp "HF" AppliedIH [].

pred mk-unfold-1 i:list param, i:term, i:term, i:term, i:term, i:term, i:term, o:hole.
mk-unfold-1 Params Unfold2 Pre Proper Mono Fix Type (hole ToProof Proof) :-
  mk-fix-toproof (u\f\res\ sigma U\ sigma F\ u = [U], f = [F], res = {{ lp:F ⊢ lp:U }}) Params Pre [Fix] [] Type ToProof', !,
  replace-params-ty Params ToProof' ToProof,!,
  if-debug (coq.say "unfold 1:" {coq.term->string ToProof}),
  mk-unfold-1.proof {std.length Params} {type-depth Type} Unfold2 Proper Mono (hole ToProof Proof),
  if-debug (coq.say "unfold 1 done").


pred mk-unfold.proof i:int, i:term, i:term, i:hole.
mk-unfold.proof Ps Unfold1 Unfold2 (hole Type Proof) :-
  do-intros-forall (hole Type Proof) (mk-unfold.proof-1 Ps Unfold1 Unfold2).

pred mk-unfold.proof-1 i:int, i:term, i:term, i:hole.
mk-unfold.proof-1 Ps Unfold1 Unfold2 H :-
  do-iStartProof H (ihole N H'), !,
  if-debug (coq.say "Started proof" {ihole->string (ihole N H')}),
  do-iAndSplit H' H1 H2,
  if-debug (coq.say "H1:" {ihole->string (ihole N H1)}),
  if-debug (coq.say "H2:" {ihole->string (ihole N H2)}),
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes1, !,
  do-iApplyLem (app [Unfold1 | Holes1]) (ihole N H1) [] [], !,
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes2, !,
  do-iApplyLem (app [Unfold2 | Holes2]) (ihole N H2) [] [].

pred mk-unfold i:list param, i:term, i:term, i:term, i:term, i:term, o:hole.
mk-unfold Params Unfold1 Unfold2 Pre Fix Type (hole ToProof Proof) :-
  mk-fix-toproof (u\f\res\ sigma U\ sigma F\ u = [U], f = [F], res = {{ lp:F ⊣⊢ lp:U }}) Params Pre [Fix] [] Type ToProof', !,
  replace-params-ty Params ToProof' ToProof,!,
  if-debug (coq.say "unfold:" {coq.term->string ToProof}),
  mk-unfold.proof {std.length Params} Unfold1 Unfold2 (hole ToProof Proof),
  if-debug (coq.say "unfold done").


pred constr-in-prebody i:term, i:list term, i:option term, i:list term, i:int, i:int, o:term.
constr-in-prebody Pre Ps Fix Xs Nth Total Res :- 
  if-debug (coq.say "constr-in-prebody" {coq.term->string Pre} Ps Fix Xs Nth Total Res), fail.
constr-in-prebody (fun _ _ F) [P | Ps] Fix Xs Nth Total Res :- !,
  constr-in-prebody (F P) Ps Fix Xs Nth Total Res.
constr-in-prebody (fun _ _ F) [] (some Fix) Xs Nth Total Res :- !,
  constr-in-prebody (F Fix) [] none Xs Nth Total Res.
constr-in-prebody (fun _ _ F) [] none [X | Xs] Nth Total Res :- !,
  constr-in-prebody (F X) [] none Xs Nth Total Res.
constr-in-prebody T [] none [] 0 1 T :- !.
constr-in-prebody (app [_, _, _, R]) [] none [] 1 2 R :- !.
constr-in-prebody (app [_, _, L, _]) [] none [] 0 _ L :- !.
constr-in-prebody (app [_, _, _, R]) [] none [] Nth Total Res :- !,
  constr-in-prebody R [] none [] { calc (Nth - 1) } { calc (Total - 1) } Res.


pred mk-constr-lem.toproof i:list param, i:term, i:term, i:term, i:int, i:int, i:list term, i:list term, o:term.
mk-constr-lem.toproof [(par ID _ T C) | Params] PreBody Fix Type Nth Total Ps [] (prod N T F) :- !,
  coq.id->name ID N,
  mk-constr-lem.toproof Params PreBody Fix Type Nth Total [C | Ps] [] Lem,
  pi x\ (copy C x :- !) => copy Lem (F x).
mk-constr-lem.toproof [] PreBody Fix (prod N T F) Nth Total Ps Xs (prod N T F') :- !,
  @pi-decl N T x\ mk-constr-lem.toproof [] PreBody Fix (F x) Nth Total Ps [x | Xs] (F' x).
mk-constr-lem.toproof [] PreBody Fix _ Nth Total PsRev XsRev {{ lp:Constr -∗ lp:FixTerm }} :- !,
  std.rev PsRev Ps,
  std.rev XsRev Xs,
  constr-in-prebody PreBody Ps (some (app [Fix | Ps])) Xs Nth Total Constr,
  FixTerm = app {std.append [Fix | Ps] Xs}.

pred mk-constr-lem.proof i:term, i:int, i:int, i:int, i:hole.
mk-constr-lem.proof Unfold2 Ps Nth Total (hole Type Proof) :-
  do-intros-forall (hole Type Proof) (mk-constr-lem.proof-1 Unfold2 Ps Nth Total).

pred mk-constr-lem.proof-1 i:term, i:int, i:int, i:int, i:hole.
mk-constr-lem.proof-1 Unfold2 Ps Nth Total H :-
  do-iStartProof H IH, !,
  do-iIntros [iIdent (iNamed "H")] IH (mk-constr-lem.proof-2 Unfold2 Ps Nth Total).

pred mk-constr-lem.proof-2 i:term, i:int, i:int, i:int, i:ihole.
mk-constr-lem.proof-2 Unfold2 Ps Nth Total IH :-
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes, !,
  do-iApplyLem (app [Unfold2 | Holes]) IH [] [AppliedIH], !,
  mk-constr-lem.proof-3 Nth Total AppliedIH.

pred mk-constr-lem.proof-3 i:int, i:int, i:ihole.
mk-constr-lem.proof-3 Nth Total IH :- if-debug (coq.say "mk-constr-lem.proof-3" Nth Total {ihole->string IH}), fail.
mk-constr-lem.proof-3 0 1 IH :- !,
  do-iApplyHyp "H" IH [].
mk-constr-lem.proof-3 1 2 (ihole N H) :- !,
  do-iRight H H', !,
  mk-constr-lem.proof-3 0 1 (ihole N H').
mk-constr-lem.proof-3 0 _ (ihole N H) :- !,
  do-iLeft H H', !,
  mk-constr-lem.proof-3 0 1 (ihole N H').
mk-constr-lem.proof-3 Nth Total (ihole N H) :- !,
  do-iRight H H', !,
  mk-constr-lem.proof-3 { calc (Nth - 1) } {calc (Total - 1)} (ihole N H').

pred mk-constr-lem i:list param, i:term, i:(term -> list indc-decl), i:term, i:term, i:term, i:int, i:int, o:constant.
mk-constr-lem Params Unfold2 Constructors PreBody Fix Type Nth Total ConstrLem :-
  mk-constr-lem.toproof Params PreBody Fix Type Nth Total [] [] ConstrType,
  if-debug (coq.say "----- Constr Lemma" { coq.term->string ConstrType } ),
  mk-constr-lem.proof Unfold2 {std.length Params} Nth Total (hole ConstrType ConstrProof),
  
  std.nth Nth (Constructors Fix) (constructor Name _),
  coq.env.add-const Name ConstrProof ConstrType ff ConstrLem.


pred mk-iter.toproof-inner-1 i:list param, i:term, i:term, i:list term, i:term, o:term.
mk-iter.toproof-inner-1 Params Pre Phi Xs (prod N T F) {{ bi_forall lp:Fun }} :-
  Fun = fun N T F',
  @pi-decl N T x\ mk-iter.toproof-inner-1 Params Pre Phi [x | Xs] (F x) (F' x).
mk-iter.toproof-inner-1 Params Pre Phi RevXs _ {{ bi_wand lp:L lp:R }} :-
  std.rev RevXs Xs,
  std.map Params (x\r\ x = par _ _ _ r) Ps,
  L = app {std.append [Pre | Ps] [Phi | Xs]},
  R = app [Phi | Xs].

pred mk-iter.toproof-inner-2 i:list param, i:term, i:term, i:list term, i:term, o:term.
mk-iter.toproof-inner-2 Params Fix Phi Xs (prod N T F) {{ bi_forall lp:Fun }} :-
  Fun = fun N T F',
  @pi-decl N T x\ mk-iter.toproof-inner-2 Params Fix Phi [x | Xs] (F x) (F' x).
mk-iter.toproof-inner-2 Params Fix Phi RevXs _ {{ bi_wand lp:L lp:R }} :-
  std.rev RevXs Xs,
  std.map Params (x\r\ x = par _ _ _ r) Ps,
  L = app {std.append [Fix | Ps] Xs},
  R = app [Phi | Xs].

pred mk-iter.toproof i:list param, i:term, i:term, i:term, o:term.
mk-iter.toproof Params Pre Fix Type (prod N Type F) :-
  coq.id->name "Φ" N,
  (pi phi\ mk-iter.toproof-2 Params Pre Fix Type phi (F phi)).

pred mk-iter.toproof-2 i:list param, i:term, i:term, i:term, i:term, o:term.
mk-iter.toproof-2 Params Pre Fix Type Phi ToProof :-
  mk-iter.toproof-inner-1 Params Pre Phi [] Type Assump,
  mk-iter.toproof-inner-2 Params Fix Phi [] Type Prem,
  ToProof = {{ (□ lp:Assump) -∗ lp:Prem }}.

pred mk-iter.proof i:int, i:hole.
mk-iter.proof N (hole Type Proof) :-
  do-intros-forall (hole Type Proof) (mk-iter.proof-1 N).

pred mk-iter.proof-1 i:int, i:hole.
mk-iter.proof-1 N H :-
  do-iStartProof H IH, !,
  std.map { std.iota N } (x\r\ r = iPure none) Pures, !,
  do-iIntros {std.append [iIntuitionistic (iIdent (iNamed "Hphi")) | Pures]
                          [iIdent (iNamed "HF"), iHyp "HF", iHyp "Hphi"]}
              IH (ih\ true).

pred mk-iter i:list param, i:term, i:term, i:term, o:hole.
mk-iter Params Pre Fix Type (hole ToProof Proof) :- 
  mk-iter.toproof Params Pre Fix Type ToProof', !,
  replace-params-ty Params ToProof' ToProof, !,
  if-debug (coq.say "iter to proof" {coq.term->string ToProof}), !,
  mk-iter.proof {type-depth Type} (hole ToProof Proof),
  if-debug (coq.say "iter proof finished").


pred mk-ind.toproof i:list param, i:term, i:term, i:term, o:term.
mk-ind.toproof Params Pre Fix Type (prod N Type F) :-
  coq.id->name "Φ" N,
  (pi phi\ mk-ind.toproof-2 Params Pre Fix Type phi (F phi)).

pred mk-ind.toproof-2 i:list param, i:term, i:term, i:term, i:term, o:term.
mk-ind.toproof-2 Params Pre Fix Type Phi {{ (□ lp:L) -∗ lp:R }} :-
  mk-ind.toproof-inner Params Pre Fix Phi [] Type Type L,
  mk-iter.toproof-inner-2 Params Fix Phi [] Type R.

pred mk-ind.toproof-fun i:list param, i:term, i:term, i:list term, i:term, o:term.
mk-ind.toproof-fun Params Phi Fix Xs (prod N T F) (fun N T F') :-
  pi x\ mk-ind.toproof-fun Params Phi Fix [x | Xs] (F x) (F' x).
mk-ind.toproof-fun Params Phi Fix RevXs _ Res :-
  std.rev RevXs Xs,
  std.map Params (x\r\ x = par _ _ _ r) Ps,
  L = app [Phi | Xs],
  R = app [Fix | {std.append Ps Xs}],
  Res = {{ bi_and lp:L lp:R }}.

pred mk-ind.toproof-inner i:list param, i:term, i:term, i:term, i:list term, i:term, i:term, o:term.
mk-ind.toproof-inner Params Pre Fix Phi Xs Type (prod N T F) {{ bi_forall lp:Fun }} :-
  Fun = fun N T F',
  @pi-decl N T x\ mk-ind.toproof-inner Params Pre Fix Phi [x | Xs] Type (F x) (F' x).
mk-ind.toproof-inner Params Pre Fix Phi RevXs Type _ {{ bi_wand lp:L lp:R }} :-
  std.rev RevXs Xs,
  std.map Params (x\r\ x = par _ _ _ r) Ps,
  mk-ind.toproof-fun Params Phi Fix [] Type IH,
  L = app {std.append [Pre | Ps] [IH | Xs]},
  R = app [Phi | Xs].

pred mk-ind.proof i:int, i:int, i:term, i:term, i:term, i:term, i:term, i:hole.
mk-ind.proof Ps N Unfold1 Unfold2 Proper Mono Iter (hole Type Proof) :-
  do-intros-forall (hole Type Proof) (mk-ind.proof-1 Ps N Unfold1 Unfold2 Proper Mono Iter).

pred mk-ind.proof-1 i:int, i:int, i:term, i:term, i:term, i:term, i:term i:hole.
mk-ind.proof-1 Ps N Unfold1 Unfold2 Proper Mono Iter H :-
  do-iStartProof H IH, !,
  std.map {std.iota N} (x\r\ r = iPure none) Pures, !,
  do-iIntros {std.append [iIntuitionistic (iIdent (iNamed "Hmon")) | Pures] 
                          [iIdent (iNamed "Hx"), iHyp "Hmon"]} IH (mk-ind.proof-2 Ps N Unfold1 Unfold2 Proper Mono Iter).

pred mk-ind.proof-2 i:int, i:int, i:term, i:term, i:term, i:term, i:term, i:ihole.
mk-ind.proof-2 Ps N Unfold1 Unfold2 Proper Mono Iter (ihole IN H) :-
  do-iEvalIn (iNamed "Hx") H IH H1,
  do-iApplyLem Unfold1 IH [] [], !,
  % Apply Monotinicity
  ((copy {{ @IProper }} {{ @iProper }} :- !) => copy Mono MonoiProper'),
  type-to-fun MonoiProper' MonoiProper,
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes, !,
  do-iApplyLem (app [MonoiProper | Holes]) (ihole IN H1) [(h\ sigma PType\ sigma PProof\ sigma List\ sigma Holes'\ sigma PTypeString\ !,
    h = hole PType PProof,
    std.iota Ps List,
    std.map List (x\r\ r = {{ _ }}) Holes',
    coq.elaborate-skeleton (app [Proper | Holes']) PType PProof D,
    if (D = ok) (true) (if-debug (coq.say "IProper error" D), fail)
  )] [(ihole N2 H2), IH2], !,
  do-iApplyHyp "Hx" IH2 [], !,
  % Continue proof
  do-iModIntro H2 H3,
  do-iApplyLem Iter (ihole N2 H3) [] [IH3],
  std.map {std.iota N} (x\r\ r = iPure none) Pures, !,
  do-iIntros {std.append [iModalIntro | Pures] [iIdent (iNamed "Hilp")]} IH3 (mk-ind.proof-3 Ps N Unfold2 Proper Mono).

pred mk-ind.proof-3 i:int, i:int, i:term, i:term, i:term, i:ihole.
mk-ind.proof-3 Ps N Unfold2 Proper Mono (ihole IN H) :-
  do-iAndSplit H H1 H2,!,
  % Left branch
  do-iApplyHyp "Hmon" (ihole IN H1) [IH1],!,
  do-iApplyHyp "Hilp" IH1 [],!,
  % Right branch
  do-iApplyLem Unfold2 (ihole IN H2) [] [IH2],!,
  % Apply Mono
  ((copy {{ @IProper }} {{ @iProper }} :- !) => copy Mono MonoiProper'),
  type-to-fun MonoiProper' MonoiProper,
  std.map {std.iota Ps} (x\r\ r = {{ _ }}) Holes, !,
  do-iApplyLem (app [MonoiProper | Holes]) IH2 [(h\ sigma PType\ sigma PProof\ sigma List\ sigma Holes'\ !,
    h = hole PType PProof,
    std.iota Ps List,
    std.map List (x\r\ r = {{ _ }}) Holes',
    coq.elaborate-skeleton (app [Proper | Holes']) PType PProof D,
    if (D = ok) (true) (if-debug (coq.say "IProper error" D), fail)
  )] [IH3, IH4],!,
  do-iApplyHyp "Hilp" IH4 [], !,
  std.map {std.iota N} (x\r\ r = iPure none) Pures, !,
  do-iIntros {std.append [iModalIntro | Pures] [iList [[iDrop, iIdent (iNamed "Hilp")]], iHyp "Hilp"]} IH3 (ih\ true).

pred mk-ind i:list param, i:term, i:term, i:term, i:term, i:term, i:term, i:term, i:term, o:hole.
mk-ind Params Pre Fix Unfold1 Unfold2 Proper Mono Iter Type (hole ToProof Proof) :-
  mk-ind.toproof Params Pre Fix Type ToProof',
  replace-params-ty Params ToProof' ToProof, !,
  if-debug (coq.say "ind to proof" {coq.term->string ToProof}), !,
  mk-ind.proof {std.length Params} {type-depth Type} Unfold1 Unfold2 Proper Mono Iter (hole ToProof Proof), !,
  if-debug (coq.say "ind proof finished").